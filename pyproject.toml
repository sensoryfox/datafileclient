[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sensory-data-client"  # Имя для PyPI
version = "0.1.1"
description = "Asynchronous facade for PostgreSQL and MinIO for corporate semantic search systems."
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" } # Хорошая практика - добавить лицензию
authors = [
    { name = "Fox", email = "fox@sensorylab.ru" } # Заполните свои данные
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "sqlalchemy[asyncio]", # Явно указываем asyncio-совместимость
    "asyncpg",
    "minio",
    "pydantic",
    "pydantic-settings",
    "alembic",
    "typer[all]", # Добавим rich для красивого вывода в CLI
    "importlib-resources; python_version < '3.9'" # Для работы с файлами пакета в старых версиях Python
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "testcontainers",
    "faker",
    "black",
    "isort",
    "mypy",
    "python-dotenv", # dotenv нужен только для локальной разработки
]

[project.scripts]
sensory_data_client = "sensory_data_client.cli:app"

[tool.setuptools.package-data]
"sensory_data_client" = ["py.typed", "alembic.ini", "alembic/versions/*.py"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 100

[tool.isort]
profile = "black"
line_length = 100

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"